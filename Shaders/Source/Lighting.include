#define PI 3.1415926535897932384626433832795

const mat4 shadowBiasMatrix = mat4( 
	0.5, 0.0, 0.0, 0.0,
	0.0, 0.5, 0.0, 0.0,
	0.0, 0.0, 1.0, 0.0,
	0.5, 0.5, 0.0, 1.0 );

const mat4 volumetricDither = mat4(
  0.0, 0.5, 0.125, 0.625,
  0.75, 0.22, 0.875, 0.375,
  0.1875, 0.6875, 0.0625, 0.5625,
  0.9375, 0.4375, 0.8125, 0.3125 );

vec3 Diffuse(const vec3 normal, const vec3 lightToFragment, const vec3 lightDirection, const vec3 lightColor, const float lightIntensity, const bool isSpot, const float cutoffCosine)
{
  vec3 color = clamp(dot(normal, -lightToFragment), 0.0, 1.0) * lightColor * lightIntensity;
  
  if (isSpot)
  {
    float spotFactor = dot(lightToFragment, lightDirection);

    if (spotFactor > cutoffCosine)
    {
      color *= (1.0 - ((1.0 - spotFactor) * (1.0 / (1.0 - cutoffCosine))));
    }
    else
    {
      color = vec3(0.0);
    }
  }
  
  return color;
}

vec3 Specular(const vec3 eyePosition, const vec3 position, const vec3 lightToFragment, const vec3 lightDirection, const vec3 normal, const vec3 lightColor, const float lightIntensity, const float roughness, const bool isSpot, const float cutoffCosine)
{
  const vec3 fragmentToEye = normalize(eyePosition - position);
	const vec3 lightReflect = normalize(reflect(lightToFragment, normal));
	vec3 color = pow(clamp(dot(fragmentToEye, lightReflect), 0.0, 1.0), roughness * 10.0) * lightColor * lightIntensity;
	
	if (isSpot)
  {
    float spotFactor = dot(lightToFragment, lightDirection);

    if (spotFactor > cutoffCosine)
    {
      color *= (1.0 - ((1.0 - spotFactor) * (1.0 / (1.0 - cutoffCosine))));
    }
    else
    {
      color = vec3(0.0);
    }
  }
	
	return color;
}

float Attenuation(const float distance, const float lightRange)
{
  return clamp(1.0 - sqrt(distance / lightRange), 0.0, 1.0);
}

uint GetCascadeIndex(const float distance, const mat4 cascadeSplits, const int numCascadeSplits)
{
  uint cascadeIndex = 0;
  
  for (uint i = 0; i < numCascadeSplits - 1; ++i)
  {
    const float cascadeSplit = cascadeSplits[i / 4][i % 4];
    
    if (distance > cascadeSplit)
    {	
      cascadeIndex = i + 1;
    }
  }
  
  return cascadeIndex;
}

float Shadow(const mat4 shadowMapViewProjectionMatrix, const vec3 position, const sampler2DArray shadowMap, const uint cascadeIndex, const float shadowBias)
{
  vec4 shadowCoord = shadowBiasMatrix * shadowMapViewProjectionMatrix * vec4(position, 1.0);
  shadowCoord /= shadowCoord.w;	
  
  if (texture(shadowMap, vec3(shadowCoord.xy, cascadeIndex)).r < shadowCoord.z - shadowBias)
  {
    return 0.0;
  }
  
  return 1.0;
}

float ShadowFiltered(const mat4 shadowMapViewProjectionMatrix, const vec3 position, const sampler2DArray shadowMap, const uint cascadeIndex, const float shadowBias, const int shadowFilterRange)
{
  ivec2 texDim = textureSize(shadowMap, 0).xy;
	float scale = 0.75;
	float dx = scale * 1.0 / float(texDim.x);
	float dy = scale * 1.0 / float(texDim.y);

	float shadowFactor = 0.0;
	int count = 0;
	
	for (int x = -shadowFilterRange; x <= shadowFilterRange; ++x)
	{
		for (int y = -shadowFilterRange; y <= shadowFilterRange; ++y)
		{
			vec4 shadowCoord = shadowBiasMatrix * shadowMapViewProjectionMatrix * vec4(position, 1.0);
      shadowCoord /= shadowCoord.w;	
      
      if (texture(shadowMap, vec3(shadowCoord.xy + vec2(dx * x, dy * y), cascadeIndex)).r > shadowCoord.z - shadowBias)
      {
        shadowFactor += 1.0;
      }
      
			count++;
		}
	}
	
	return shadowFactor / count;
}

vec3 Volumetric(const vec3 position, const vec3 eyePosition, const mat4 shadowMapViewProjectionMatrix, const sampler2DArray shadowMap, const uint cascadeIndex, const vec3 lightDirection, const vec3 lightColor, const float lightIntensity, const float shadowBias)
{
  const vec3 rayVector = position - eyePosition;
  const float rayLength = length(rayVector);
  const vec3 rayDirection = rayVector / rayLength;
  const float stepLength = rayLength / VOLUMETRIC_STEPS;
  const vec3 step = rayDirection * stepLength;
  const ivec2 screenUV = ivec2(gl_FragCoord.xy);
  const float ditherValue = volumetricDither[screenUV.x % 4][screenUV.y % 4];
  
  vec3 currentPosition = eyePosition + step * ditherValue;
  float volumetric = 0.0;
  
  for (int i = 0; i < VOLUMETRIC_STEPS; ++i)
  {
    if (Shadow(shadowMapViewProjectionMatrix, currentPosition, shadowMap, cascadeIndex, shadowBias) > 0.5)
    {
      float scattering = 1.0 - VOLUMETRIC_SCATTERING * VOLUMETRIC_SCATTERING;
      scattering /= 4.0 * PI * pow(1.0 + VOLUMETRIC_SCATTERING * VOLUMETRIC_SCATTERING - (2.0 * VOLUMETRIC_SCATTERING) * dot(rayDirection, lightDirection), 1.5);
      volumetric += scattering;
    }
    
    currentPosition += step;
  }
  
  return (volumetric / VOLUMETRIC_STEPS) * lightIntensity * VOLUMETRIC_INTENSITY * lightColor;
}